{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Text, Divider } from \"react-native-elements\";\nimport Separator from \"../components/separater\";\nimport Constance from \"../theme/const\";\nimport { ThemeContext } from \"../theme/themeProvider\";\nimport axios from 'axios';\nimport * as SecureStore from 'expo-secure-store';\nimport { SwipeListView } from 'react-native-swipe-list-view';\nimport Progress from \"../components/indicator\";\nimport PlaceItemComponent from \"../components/places\";\n\nvar Reservation = function Reservation(_ref) {\n  var navigation = _ref.navigation;\n  var history = [{\n    id: 1,\n    name: \"price\"\n  }, {\n    id: 2,\n    name: \"location\"\n  }, {\n    id: 3,\n    name: \"cancelled\"\n  }, {\n    id: 4,\n    name: \"pending\"\n  }];\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      search = _useState2[0],\n      setsearch = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      results = _useState4[0],\n      setresults = _useState4[1];\n\n  var _useContext = useContext(ThemeContext),\n      theme = _useContext.theme,\n      dark = _useContext.dark;\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      booking = _useState6[0],\n      setbooking = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      load = _useState8[0],\n      setload = _useState8[1];\n\n  var GetReservations = function GetReservations() {\n    var key;\n    return _regeneratorRuntime.async(function GetReservations$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(SecureStore.getItemAsync('key'));\n\n          case 2:\n            _context.t0 = _context.sent;\n\n            if (_context.t0) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.t0 = 'null';\n\n          case 5:\n            key = _context.t0;\n            axios.get(\"https://sunstarapi.herokuapp.com/roomReservation/reservation/\" + key).then(function (notifications) {\n              var roomdata = [];\n              notifications.data.forEach(function (reserve) {\n                if (reserve.active === true) {\n                  axios.get(\"https://sunstarapi.herokuapp.com/room/\" + reserve.roomId).then(function (room) {\n                    var locationUrl = \"https://sunstarapi.herokuapp.com/property/\" + reserve.roomId;\n                    axios.get(locationUrl).then(function (property_res) {\n                      var one_day = 1000 * 60 * 60 * 24;\n                      var endDate = new Date(reserve.checkoutDate);\n                      var startDate = new Date(reserve.checkinDate);\n                      var days = Math.round(endDate - startDate) / one_day;\n                      var price = (parseInt(room.data.price) * days).toString();\n                      axios.get(\"https://sunstarapi.herokuapp.com/hotel/\" + reserve.hotelId).then(function (hotel_res) {\n                        var data = {\n                          key: reserve._id,\n                          roomId: reserve.roomId,\n                          type: room.data.type,\n                          status: room.data.status,\n                          floor: room.data.floor,\n                          days: days,\n                          price: price,\n                          roomNumber: room.data.roomNumber,\n                          hotelName: hotel_res.data.name,\n                          bedtype: property_res.data.bedtype,\n                          tv: property_res.data.tv,\n                          wifi: property_res.data.wifi,\n                          parking: property_res.data.parking,\n                          numberOfBed: property_res.data.numberOfBed\n                        };\n                        roomdata.push(data);\n                        setbooking(roomdata);\n                      }).catch(function (err) {\n                        console.log(err + \"--------------\");\n                      });\n                    }).catch(function (err) {\n                      console.log(err);\n                    });\n                  }).catch(function (err) {\n                    console.log(err + \"========\");\n                  });\n                } else {\n                  console.log(\"+>>>>>===>>>>>>===>>>>\");\n                }\n              });\n            }).catch(function (err) {\n              console.log(err + \" ==\");\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    GetReservations();\n  }, []);\n  return React.createElement(View, {\n    style: {\n      backgroundColor: theme.background,\n      height: '100%',\n      width: '100%'\n    }\n  }, React.createElement(StatusBar, {\n    barStyle: dark ? 'light-content' : 'dark-content',\n    backgroundColor: theme.background\n  }), React.createElement(View, {\n    style: {\n      padding: 12\n    }\n  }, React.createElement(Text, null, \"Active bookings\")), React.createElement(SwipeListView, {\n    data: booking,\n    renderItem: function renderItem(data, rowMap) {\n      return React.createElement(PlaceItemComponent, {\n        address: data.item.hotelName,\n        name: data.item.type,\n        price: data.item.days + \" days for R \" + data.item.price,\n        ratings: data.item.bedtype,\n        key: data.item.roomId\n      });\n    },\n    bounces: true,\n    bouncesZoom: true,\n    disableRightSwipe: true,\n    ItemSeparatorComponent: Separator,\n    renderHiddenItem: function renderHiddenItem(data, rowMap) {\n      return React.createElement(View, {\n        style: {\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'flex-end'\n        }\n      }, React.createElement(View, {\n        style: {\n          paddingHorizontal: 12,\n          paddingVertical: 12\n        }\n      }, load ? React.createElement(View, {\n        style: {\n          justifyContent: 'center',\n          alignItems: 'center',\n          paddingVertical: 10,\n          paddingHorizontal: 15\n        }\n      }, React.createElement(Progress, null)) : React.createElement(View, null, React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.navigate('roomscreen', {\n            key: data.item.roomId\n          });\n        },\n        style: {\n          paddingHorizontal: 5,\n          marginVertical: 6\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: Constance.medium,\n          fontWeight: 'bold',\n          color: theme.text,\n          backgroundColor: Constance.Blue,\n          borderRadius: 7,\n          padding: 5\n        }\n      }, \"Cancel\")), React.createElement(Divider, null))));\n    },\n    leftOpenValue: 85,\n    rightOpenValue: -85\n  }));\n};\n\nexport default Reservation;","map":{"version":3,"sources":["D:/Development/Mobile Development/React native/Hotel/SunStar/SunStar/userapp/source/screens/reservations.tsx"],"names":["React","useContext","useEffect","useState","Text","Divider","Separator","Constance","ThemeContext","axios","SecureStore","SwipeListView","Progress","PlaceItemComponent","Reservation","navigation","history","id","name","search","setsearch","results","setresults","theme","dark","booking","setbooking","load","setload","GetReservations","getItemAsync","key","get","then","notifications","roomdata","data","forEach","reserve","active","roomId","room","locationUrl","property_res","one_day","endDate","Date","checkoutDate","startDate","checkinDate","days","Math","round","price","parseInt","toString","hotelId","hotel_res","_id","type","status","floor","roomNumber","hotelName","bedtype","tv","wifi","parking","numberOfBed","push","catch","err","console","log","backgroundColor","background","height","width","padding","rowMap","item","display","flexDirection","justifyContent","paddingHorizontal","paddingVertical","alignItems","navigate","marginVertical","fontSize","medium","fontWeight","color","text","Blue","borderRadius"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport { FlatList, Platform, StatusBar, TouchableOpacity, View } from \"react-native\";\r\nimport { Icon, Image, Text, Divider } from \"react-native-elements\";\r\nimport { TextInput } from \"react-native-paper\";\r\nimport ActionBar from \"../components/actionbar\";\r\nimport InputComponent from \"../components/input\";\r\nimport Separator from \"../components/separater\";\r\nimport TextComponent from \"../components/text\";\r\nimport Constance from \"../theme/const\";\r\nimport { ThemeContext } from \"../theme/themeProvider\";\r\nimport axios from 'axios';\r\nimport * as SecureStore from 'expo-secure-store';\r\nimport { SwipeListView } from 'react-native-swipe-list-view';\r\nimport Progress from \"../components/indicator\";\r\nimport PlaceItemComponent from \"../components/places\";\r\n\r\nconst Reservation = ({ navigation }) => {\r\n\r\n    const history = [\r\n        {\r\n            id: 1,\r\n            name: \"price\",\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"location\",\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"cancelled\",\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"pending\",\r\n        },\r\n\r\n    ];\r\n    const [search, setsearch] = useState('');\r\n    const [results, setresults] = useState([]);\r\n    const { theme, dark } = useContext(ThemeContext)\r\n    const [booking, setbooking] = useState('');\r\n    const [load, setload] = useState(false);\r\n\r\n    const GetReservations = async () => {\r\n\r\n        let key = await SecureStore.getItemAsync('key') || 'null';\r\n        axios.get(`https://sunstarapi.herokuapp.com/roomReservation/reservation/${key}`).then((notifications) => {\r\n\r\n            const roomdata: any = [];\r\n            notifications.data.forEach((reserve: any) => {\r\n\r\n                if (reserve.active === true) {\r\n                    axios.get(`https://sunstarapi.herokuapp.com/room/${reserve.roomId}`).then((room: any) => {\r\n\r\n                        const locationUrl = \"https://sunstarapi.herokuapp.com/property/\" + reserve.roomId;\r\n                        axios.get(locationUrl)\r\n                            .then((property_res) => {\r\n\r\n\r\n                                var one_day = 1000 * 60 * 60 * 24;\r\n\r\n                                let endDate = new Date(reserve.checkoutDate);\r\n                                let startDate = new Date(reserve.checkinDate);\r\n\r\n                                let days = Math.round(endDate - startDate) / (one_day);\r\n\r\n                                let price = (parseInt(room.data.price) * days).toString();\r\n\r\n\r\n                                axios.get(`https://sunstarapi.herokuapp.com/hotel/${reserve.hotelId}`)\r\n                                    .then((hotel_res) => {\r\n\r\n                                        const data = {\r\n                                            key: reserve._id,\r\n                                            roomId: reserve.roomId,\r\n                                            type: room.data.type,\r\n                                            status: room.data.status,\r\n                                            floor: room.data.floor,\r\n                                            days: days,\r\n                                            price: price,\r\n                                            roomNumber: room.data.roomNumber,\r\n                                            hotelName: hotel_res.data.name,\r\n                                            bedtype: property_res.data.bedtype,\r\n                                            tv: property_res.data.tv,\r\n                                            wifi: property_res.data.wifi,\r\n                                            parking: property_res.data.parking,\r\n                                            numberOfBed: property_res.data.numberOfBed,\r\n                                        }\r\n\r\n                                        roomdata.push(data);\r\n\r\n                                        setbooking(roomdata);\r\n                                        // console.log(roomdata);\r\n\r\n                                    }).catch((err) => {\r\n                                        console.log(err + \"--------------\");\r\n                                    })\r\n                            }).catch((err) => {\r\n                                console.log(err);\r\n                            })\r\n                    }).catch((err) => {\r\n                        console.log(err + \"========\");\r\n\r\n                    })\r\n                }else{\r\n                    console.log(\"+>>>>>===>>>>>>===>>>>\");\r\n                    \r\n                }\r\n            })\r\n        }).catch((err) => {\r\n            console.log(err + \" ==\");\r\n        });\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        GetReservations();\r\n    }, [])\r\n\r\n    return (\r\n        <View style={{ backgroundColor: theme.background , height:'100%', width:'100%'}}>\r\n            <StatusBar barStyle={dark ? 'light-content' : 'dark-content'} backgroundColor={theme.background} />\r\n\r\n            <View style={{ padding: 12 }}>\r\n                <Text>Active bookings</Text>\r\n            </View>\r\n            <SwipeListView\r\n                data={booking}\r\n                renderItem={(data, rowMap) => (\r\n                    <PlaceItemComponent address={data.item.hotelName}\r\n                        name={data.item.type} price={`${data.item.days} days for R ${data.item.price}`} ratings={data.item.bedtype}\r\n                        key={data.item.roomId} />\r\n                )}\r\n                bounces\r\n                bouncesZoom\r\n                disableRightSwipe\r\n                ItemSeparatorComponent={Separator}\r\n                renderHiddenItem={(data, rowMap) => (\r\n                    <View style={{ display: 'flex', flexDirection: 'row', justifyContent: 'flex-end' }}>\r\n                        <View style={{ paddingHorizontal: 12, paddingVertical: 12 }}>\r\n                            {load ? <View style={{ justifyContent: 'center', alignItems: 'center', paddingVertical: 10, paddingHorizontal: 15 }}>\r\n                                <Progress />\r\n                            </View>\r\n                                : <View>\r\n                                    <TouchableOpacity onPress={() => navigation.navigate('roomscreen', { key: data.item.roomId })} style={{ paddingHorizontal: 5, marginVertical: 6 }} >\r\n                                        <Text style={{ fontSize: Constance.medium, fontWeight: 'bold', color: theme.text, backgroundColor: Constance.Blue, borderRadius: 7, padding: 5, }}>\r\n                                            Cancel\r\n                                        </Text>\r\n                                    </TouchableOpacity>\r\n                                    <Divider />\r\n                                       </View>}\r\n                        </View>\r\n                    </View>\r\n                )}\r\n                leftOpenValue={85}\r\n                rightOpenValue={-85}\r\n            />\r\n\r\n\r\n\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default Reservation;"]},"metadata":{},"sourceType":"module"}