{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = __importStar(require(\"react\"));\n\nvar react_1 = require(\"react\");\n\nvar react_native_1 = require(\"react-native-web/dist/index\");\n\nvar react_native_webview_1 = require(\"react-native-webview\");\n\nvar helper_1 = require(\"./helper\");\n\nvar CLOSE_URL = 'https://standard.paystack.co/close';\n\nvar Paystack = function Paystack(_ref, ref) {\n  var paystackKey = _ref.paystackKey,\n      billingEmail = _ref.billingEmail,\n      phone = _ref.phone,\n      lastName = _ref.lastName,\n      firstName = _ref.firstName,\n      _ref$amount = _ref.amount,\n      amount = _ref$amount === void 0 ? '0.00' : _ref$amount,\n      _ref$currency = _ref.currency,\n      currency = _ref$currency === void 0 ? 'NGN' : _ref$currency,\n      _ref$channels = _ref.channels,\n      channels = _ref$channels === void 0 ? ['card'] : _ref$channels,\n      refNumber = _ref.refNumber,\n      billingName = _ref.billingName,\n      handleWebViewMessage = _ref.handleWebViewMessage,\n      onCancel = _ref.onCancel,\n      _ref$autoStart = _ref.autoStart,\n      autoStart = _ref$autoStart === void 0 ? false : _ref$autoStart,\n      onSuccess = _ref.onSuccess,\n      _ref$activityIndicato = _ref.activityIndicatorColor,\n      activityIndicatorColor = _ref$activityIndicato === void 0 ? 'green' : _ref$activityIndicato;\n\n  var _react_1$useState = react_1.useState(true),\n      _react_1$useState2 = _slicedToArray(_react_1$useState, 2),\n      isLoading = _react_1$useState2[0],\n      setisLoading = _react_1$useState2[1];\n\n  var _react_1$useState3 = react_1.useState(false),\n      _react_1$useState4 = _slicedToArray(_react_1$useState3, 2),\n      showModal = _react_1$useState4[0],\n      setshowModal = _react_1$useState4[1];\n\n  var webView = react_1.useRef(null);\n  react_1.useEffect(function () {\n    autoStartCheck();\n  }, []);\n  react_1.useImperativeHandle(ref, function () {\n    return {\n      startTransaction: function startTransaction() {\n        setshowModal(true);\n      },\n      endTransaction: function endTransaction() {\n        setshowModal(false);\n      }\n    };\n  });\n\n  var autoStartCheck = function autoStartCheck() {\n    if (autoStart) {\n      setshowModal(true);\n    }\n  };\n\n  var refNumberString = refNumber ? \"ref: '\" + refNumber + \"',\" : '';\n  var Paystackcontent = \"   \\n      <!DOCTYPE html>\\n      <html lang=\\\"en\\\">\\n        <head>\\n          <meta charset=\\\"UTF-8\\\">\\n          <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"ie=edge\\\">\\n          <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n          <title>Paystack</title>\\n        </head>\\n          <body  onload=\\\"payWithPaystack()\\\" style=\\\"background-color:#fff;height:100vh\\\">\\n            <script src=\\\"https://js.paystack.co/v1/inline.js\\\"></script>\\n            <script type=\\\"text/javascript\\\">\\n              window.onload = payWithPaystack;\\n              function payWithPaystack(){\\n              var handler = PaystackPop.setup({ \\n                key: '\" + paystackKey + \"',\\n                email: '\" + billingEmail + \"',\\n                firstname: '\" + firstName + \"',\\n                lastname: '\" + lastName + \"',\\n                phone: '\" + phone + \"',\\n                amount: \" + helper_1.getAmountValueInKobo(amount) + \", \\n                currency: '\" + currency + \"',\\n                \" + helper_1.getChannels(channels) + \"\\n                \" + refNumberString + \"\\n                metadata: {\\n                custom_fields: [\\n                        {\\n                        display_name:  '\" + (firstName + ' ' + lastName) + \"',\\n                        variable_name:  '\" + billingName + \"',\\n                        value:''\\n                        }\\n                ]},\\n                callback: function(response){\\n                      var resp = {event:'successful', transactionRef:response};\\n                        window.ReactNativeWebView.postMessage(JSON.stringify(resp))\\n                },\\n                onClose: function(){\\n                    var resp = {event:'cancelled'};\\n                    window.ReactNativeWebView.postMessage(JSON.stringify(resp))\\n                }\\n                });\\n                handler.openIframe();\\n                }\\n            </script> \\n          </body>\\n      </html> \\n      \";\n\n  var messageReceived = function messageReceived(data) {\n    var webResponse = JSON.parse(data);\n\n    if (handleWebViewMessage) {\n      handleWebViewMessage(data);\n    }\n\n    switch (webResponse.event) {\n      case 'cancelled':\n        setshowModal(false);\n        onCancel({\n          status: 'cancelled'\n        });\n        break;\n\n      case 'successful':\n        setshowModal(false);\n        var reference = webResponse.transactionRef;\n\n        if (onSuccess) {\n          onSuccess({\n            status: 'success',\n            transactionRef: reference,\n            data: webResponse\n          });\n        }\n\n        break;\n\n      default:\n        if (handleWebViewMessage) {\n          handleWebViewMessage(data);\n        }\n\n        break;\n    }\n  };\n\n  var onNavigationStateChange = function onNavigationStateChange(state) {\n    var url = state.url;\n\n    if (url === CLOSE_URL) {\n      setshowModal(false);\n    }\n  };\n\n  return React.createElement(react_native_1.Modal, {\n    style: {\n      flex: 1\n    },\n    visible: showModal,\n    animationType: \"slide\",\n    transparent: false\n  }, React.createElement(react_native_1.SafeAreaView, {\n    style: {\n      flex: 1\n    }\n  }, React.createElement(react_native_webview_1.WebView, {\n    style: [{\n      flex: 1\n    }],\n    source: {\n      html: Paystackcontent\n    },\n    onMessage: function onMessage(e) {\n      var _e$nativeEvent;\n\n      messageReceived((_e$nativeEvent = e.nativeEvent) == null ? void 0 : _e$nativeEvent.data);\n    },\n    onLoadStart: function onLoadStart() {\n      return setisLoading(true);\n    },\n    onLoadEnd: function onLoadEnd() {\n      return setisLoading(false);\n    },\n    onNavigationStateChange: onNavigationStateChange,\n    ref: webView,\n    cacheEnabled: false,\n    cacheMode: 'LOAD_NO_CACHE'\n  }), isLoading && React.createElement(react_native_1.View, null, React.createElement(react_native_1.ActivityIndicator, {\n    size: \"large\",\n    color: activityIndicatorColor\n  }))));\n};\n\nexports.default = react_1.forwardRef(Paystack);","map":{"version":3,"sources":["../src/paystack.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst React = __importStar(require(\"react\"));\nconst react_1 = require(\"react\");\nconst react_native_1 = require(\"react-native\");\nconst react_native_webview_1 = require(\"react-native-webview\");\nconst helper_1 = require(\"./helper\");\nconst CLOSE_URL = 'https://standard.paystack.co/close';\nconst Paystack = ({ paystackKey, billingEmail, phone, lastName, firstName, amount = '0.00', currency = 'NGN', channels = ['card'], refNumber, billingName, handleWebViewMessage, onCancel, autoStart = false, onSuccess, activityIndicatorColor = 'green', }, ref) => {\n    const [isLoading, setisLoading] = react_1.useState(true);\n    const [showModal, setshowModal] = react_1.useState(false);\n    const webView = react_1.useRef(null);\n    react_1.useEffect(() => {\n        autoStartCheck();\n    }, []);\n    react_1.useImperativeHandle(ref, () => ({\n        startTransaction() {\n            setshowModal(true);\n        },\n        endTransaction() {\n            setshowModal(false);\n        },\n    }));\n    const autoStartCheck = () => {\n        if (autoStart) {\n            setshowModal(true);\n        }\n    };\n    const refNumberString = refNumber ? `ref: '${refNumber}',` : ''; // should only send ref number if present, else if blank, paystack will auto-generate one\n    const Paystackcontent = `   \n      <!DOCTYPE html>\n      <html lang=\"en\">\n        <head>\n          <meta charset=\"UTF-8\">\n          <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          <title>Paystack</title>\n        </head>\n          <body  onload=\"payWithPaystack()\" style=\"background-color:#fff;height:100vh\">\n            <script src=\"https://js.paystack.co/v1/inline.js\"></script>\n            <script type=\"text/javascript\">\n              window.onload = payWithPaystack;\n              function payWithPaystack(){\n              var handler = PaystackPop.setup({ \n                key: '${paystackKey}',\n                email: '${billingEmail}',\n                firstname: '${firstName}',\n                lastname: '${lastName}',\n                phone: '${phone}',\n                amount: ${helper_1.getAmountValueInKobo(amount)}, \n                currency: '${currency}',\n                ${helper_1.getChannels(channels)}\n                ${refNumberString}\n                metadata: {\n                custom_fields: [\n                        {\n                        display_name:  '${firstName + ' ' + lastName}',\n                        variable_name:  '${billingName}',\n                        value:''\n                        }\n                ]},\n                callback: function(response){\n                      var resp = {event:'successful', transactionRef:response};\n                        window.ReactNativeWebView.postMessage(JSON.stringify(resp))\n                },\n                onClose: function(){\n                    var resp = {event:'cancelled'};\n                    window.ReactNativeWebView.postMessage(JSON.stringify(resp))\n                }\n                });\n                handler.openIframe();\n                }\n            </script> \n          </body>\n      </html> \n      `;\n    const messageReceived = (data) => {\n        const webResponse = JSON.parse(data);\n        if (handleWebViewMessage) {\n            handleWebViewMessage(data);\n        }\n        switch (webResponse.event) {\n            case 'cancelled':\n                setshowModal(false);\n                onCancel({ status: 'cancelled' });\n                break;\n            case 'successful':\n                setshowModal(false);\n                const reference = webResponse.transactionRef;\n                if (onSuccess) {\n                    onSuccess({\n                        status: 'success',\n                        transactionRef: reference,\n                        data: webResponse,\n                    });\n                }\n                break;\n            default:\n                if (handleWebViewMessage) {\n                    handleWebViewMessage(data);\n                }\n                break;\n        }\n    };\n    const onNavigationStateChange = (state) => {\n        const { url } = state;\n        if (url === CLOSE_URL) {\n            setshowModal(false);\n        }\n    };\n    return (<react_native_1.Modal style={{ flex: 1 }} visible={showModal} animationType=\"slide\" transparent={false}>\n      <react_native_1.SafeAreaView style={{ flex: 1 }}>\n        <react_native_webview_1.WebView style={[{ flex: 1 }]} source={{ html: Paystackcontent }} onMessage={(e) => {\n            messageReceived(e.nativeEvent?.data);\n        }} onLoadStart={() => setisLoading(true)} onLoadEnd={() => setisLoading(false)} onNavigationStateChange={onNavigationStateChange} ref={webView} cacheEnabled={false} cacheMode={'LOAD_NO_CACHE'}/>\n\n        {isLoading && (<react_native_1.View>\n            <react_native_1.ActivityIndicator size=\"large\" color={activityIndicatorColor}/>\n          </react_native_1.View>)}\n      </react_native_1.SafeAreaView>\n    </react_native_1.Modal>);\n};\nexports.default = react_1.forwardRef(Paystack);\n//# sourceMappingURL=paystack.js.map"]},"metadata":{},"sourceType":"script"}