{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Route from \"./source/routes/systemroutes\";\nimport { ThemeProvider } from \"./source/theme/themeProvider\";\nimport React, { useEffect, useRef } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Constants from 'expo-constants';\nimport * as Notifications from 'expo-notifications';\nimport axios from 'axios';\nimport NetInfo from '@react-native-community/netinfo';\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regeneratorRuntime.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true,\n              shouldPlaySound: false,\n              shouldSetBadge: false\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\n\nfunction registerForPushNotificationsAsync() {\n  var token, _await$Notifications$, existingStatus, finalStatus, _await$Notifications$2, status;\n\n  return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!Constants.isDevice) {\n            _context2.next = 17;\n            break;\n          }\n\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(Notifications.getPermissionsAsync());\n\n        case 3:\n          _await$Notifications$ = _context2.sent;\n          existingStatus = _await$Notifications$.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== 'granted')) {\n            _context2.next = 12;\n            break;\n          }\n\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(Notifications.requestPermissionsAsync());\n\n        case 9:\n          _await$Notifications$2 = _context2.sent;\n          status = _await$Notifications$2.status;\n          finalStatus = status;\n\n        case 12:\n          _context2.next = 14;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 14:\n          token = _context2.sent.data;\n          _context2.next = 18;\n          break;\n\n        case 17:\n          console.log('Must use physical device for Push Notifications');\n\n        case 18:\n          if (Platform.OS === 'android') {\n            Notifications.setNotificationChannelAsync('default', {\n              name: 'default',\n              importance: Notifications.AndroidImportance.MAX,\n              vibrationPattern: [0, 250, 250, 250],\n              lightColor: '#FF231F7C'\n            });\n          }\n\n          return _context2.abrupt(\"return\", token);\n\n        case 20:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default function App(_ref) {\n  var navigation = _ref.navigation;\n  var responseListener = useRef();\n  useEffect(function () {\n    NetInfo.fetch().then(function (state) {\n      console.log('Connection type', state.type);\n      console.log('Is connected?', state.isConnected);\n    });\n\n    if (Constants.isDevice && Platform.OS !== 'web') {\n      registerForPushNotificationsAsync().then(function (token) {\n        axios.post(\"https://app.nativenotify.com/api/expo/key\", {\n          appId: 910,\n          appToken: 'IBzo5MJJB46vcD3JGfjwRf',\n          expoToken: token\n        });\n      });\n      responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {\n        console.log(response.notification.request.content.data.screen);\n        navigation.navigate(response.notification.request.content.data.screen);\n      });\n      return function () {\n        Notifications.removeNotificationSubscription(responseListener);\n      };\n    }\n  });\n  return React.createElement(ThemeProvider, null, React.createElement(Route, null));\n}","map":{"version":3,"sources":["D:/Development/Mobile Development/React native/Hotel/SunStar/SunStar/userapp/App.tsx"],"names":["Route","ThemeProvider","React","useEffect","useRef","Constants","Notifications","axios","NetInfo","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","registerForPushNotificationsAsync","isDevice","getPermissionsAsync","existingStatus","status","finalStatus","requestPermissionsAsync","getExpoPushTokenAsync","token","data","console","log","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","App","navigation","responseListener","fetch","then","state","type","isConnected","post","appId","appToken","expoToken","current","addNotificationResponseReceivedListener","response","notification","request","content","screen","navigate","removeNotificationSubscription"],"mappings":"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","sourcesContent":["import Route from './source/routes/systemroutes';\nimport { ThemeProvider } from './source/theme/themeProvider';\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Platform } from 'react-native';\nimport Constants from 'expo-constants';\nimport * as Notifications from 'expo-notifications';\nimport axios from 'axios';\nimport NetInfo from '@react-native-community/netinfo';\n\nNotifications.setNotificationHandler({ handleNotification: async () => ({ shouldShowAlert: true, shouldPlaySound: false, shouldSetBadge: false, }) });\nasync function registerForPushNotificationsAsync() { let token; if (Constants.isDevice) { const { status: existingStatus } = await Notifications.getPermissionsAsync(); let finalStatus = existingStatus; if (existingStatus !== 'granted') { const { status } = await Notifications.requestPermissionsAsync(); finalStatus = status; } token = (await Notifications.getExpoPushTokenAsync()).data; } else { console.log('Must use physical device for Push Notifications'); } if (Platform.OS === 'android') { Notifications.setNotificationChannelAsync('default', { name: 'default', importance: Notifications.AndroidImportance.MAX, vibrationPattern: [0, 250, 250, 250], lightColor: '#FF231F7C', }); } return token; }\n\nexport default function App({navigation}) {\n\n   const responseListener = useRef();\n   useEffect(() => {\n\n      NetInfo.fetch().then(state => {\n         console.log('Connection type', state.type);\n         console.log('Is connected?', state.isConnected);\n       });\n\n      if (Constants.isDevice && Platform.OS !== 'web') {\n         registerForPushNotificationsAsync().then(token => {\n            axios.post(`https://app.nativenotify.com/api/expo/key`, { appId: 910, appToken: 'IBzo5MJJB46vcD3JGfjwRf', expoToken: token })\n         });\n         responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n            console.log(response.notification.request.content.data.screen); \n            navigation.navigate(response.notification.request.content.data.screen )\n            \n         });\n         return () => { Notifications.removeNotificationSubscription(responseListener); };\n      }\n   });\n  \n    \n\n   return (\n      <ThemeProvider>\n         <Route />\n      </ThemeProvider>\n   );\n}\n\n\n"]},"metadata":{},"sourceType":"module"}