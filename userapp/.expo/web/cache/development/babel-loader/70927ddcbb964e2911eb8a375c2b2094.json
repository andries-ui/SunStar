{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Formik } from 'formik';\nimport React, { useState } from 'react';\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Snackbar, TextInput } from 'react-native-paper';\nimport ButtonComponent from \"../components/button\";\nimport InputComponent from \"../components/input\";\nimport TextComponent from \"../components/text\";\nimport style from \"../styles/screens/login\";\nimport Constance from \"../theme/const\";\nimport * as yup from 'yup';\nimport * as Animatable from 'react-native-animatable';\nimport Anim from \"../components/anim\";\nimport axios from 'axios';\nimport { useRoute } from '@react-navigation/native';\nimport Progress from \"../components/indicator\";\nvar loginSchema = yup.object({\n  password: yup.string().required(\"Required\").min(8).matches(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/, \"Invalid password\"),\n  cpassword: yup.string().required(\"Required\").min(8).matches(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/, \"Invalid password\")\n});\n\nvar ResetPassword = function ResetPassword(_ref) {\n  var navigation = _ref.navigation;\n  var props = useRoute().params;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setemail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setpassword = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      visible = _useState6[0],\n      setVisible = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      load = _useState8[0],\n      setload = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      message = _useState10[0],\n      setmessage = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      invalid = _useState12[0],\n      setinvalid = _useState12[1];\n\n  var UpdatePassword = function UpdatePassword(values) {\n    return _regeneratorRuntime.async(function UpdatePassword$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setload(true);\n            axios.patch(\"https://sunstarapi.herokuapp.com/user/\" + props.key, values).then(function (res) {\n              var results = res.data;\n              console.log('====================================');\n              console.log(values, props.key, results);\n              console.log('====================================');\n\n              if (results.status == 'Success') {\n                setinvalid(true);\n                setmessage(results.message);\n                setload(false);\n                navigation.navigate('loginscreen');\n              } else {\n                setmessage(results.message);\n                setinvalid(true);\n                setload(false);\n              }\n            }).catch(function (err) {\n              setinvalid(true);\n              setmessage(err);\n              setload(false);\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: {\n      height: '100%',\n      width: '100%'\n    }\n  }, React.createElement(StatusBar, {\n    barStyle: 'dark-content',\n    backgroundColor: Constance.White\n  }), React.createElement(View, {\n    style: style.parent\n  }, React.createElement(View, {\n    style: [style.topcontainer, {\n      justifyContent: 'center',\n      alignItems: 'center'\n    }]\n  }, React.createElement(View, {\n    style: {\n      position: 'absolute',\n      justifyContent: 'center',\n      alignItems: 'center',\n      padding: 40\n    }\n  }, React.createElement(Anim, {\n    json: require(\"../../assets/lottie/75988-forgot-password.json\"),\n    autoplay: true,\n    autosize: true,\n    loop: true,\n    speed: 1,\n    style: {\n      height: '100%',\n      width: '100%'\n    }\n  }))), React.createElement(View, {\n    style: style.bottomcontainer\n  }, React.createElement(TextComponent, {\n    style: {\n      fontSize: Constance.medium,\n      marginVertical: 15\n    },\n    text: \"Reset password\"\n  }), React.createElement(Formik, {\n    initialValues: {\n      password: '',\n      cpassword: ''\n    },\n    onSubmit: function onSubmit(values, action) {\n      if (values.password === values.cpassword) {\n        UpdatePassword(values);\n      } else {\n        setmessage(\"Password does not match\");\n        setinvalid(true);\n      }\n    },\n    validationSchema: loginSchema\n  }, function (props) {\n    return React.createElement(View, null, React.createElement(InputComponent, {\n      hint: \"Password\",\n      left: React.createElement(TextInput.Icon, {\n        name: \"at\"\n      }),\n      changeText: props.handleChange(\"password\"),\n      value: props.values.password,\n      style: {\n        borderColor: Constance.light_border,\n        borderWidth: 1,\n        borderRadius: 5\n      }\n    }), props.errors.password || null ? React.createElement(Animatable.View, {\n      animation: \"pulse\",\n      easing: \"ease-out\"\n    }, React.createElement(TextComponent, {\n      style: {\n        color: Constance.Red\n      },\n      text: props.errors.password\n    })) : null, React.createElement(InputComponent, {\n      hint: \"Comfirm Password\",\n      left: React.createElement(TextInput.Icon, {\n        name: \"account-box\"\n      }),\n      changeText: props.handleChange(\"cpassword\"),\n      value: props.values.cpassword,\n      style: {\n        borderColor: Constance.light_border,\n        borderRadius: 5,\n        borderWidth: 1,\n        top: 5\n      }\n    }), props.errors.cpassword ? React.createElement(Animatable.View, {\n      animation: \"pulse\",\n      easing: \"ease-out\"\n    }, React.createElement(TextComponent, {\n      style: {\n        color: Constance.Red\n      },\n      text: props.errors.cpassword\n    })) : null, React.createElement(ButtonComponent, {\n      mode: \"contained\",\n      btnstyle: {\n        backgroundColor: Constance.Yellow,\n        marginTop: 30\n      },\n      lblstyle: {\n        color: Constance.White,\n        textTransform: 'capitalize'\n      },\n      text: \"Reset Password\",\n      press: props.handleSubmit\n    }));\n  })), React.createElement(Snackbar, {\n    visible: invalid,\n    onDismiss: function onDismiss() {\n      return setinvalid(false);\n    }\n  }, message), load ? React.createElement(View, {\n    style: {\n      height: '100%',\n      width: '100%',\n      position: 'absolute',\n      justifyContent: 'center',\n      alignItems: 'center'\n    }\n  }, React.createElement(Progress, null)) : null));\n};\n\nexport default ResetPassword;","map":{"version":3,"sources":["D:/Development/Mobile Development/React native/Hotel/SunStar/SunStar/userapp/source/screens/reset.tsx"],"names":["Formik","React","useState","Snackbar","TextInput","ButtonComponent","InputComponent","TextComponent","style","Constance","yup","Animatable","Anim","axios","useRoute","Progress","loginSchema","object","password","string","required","min","matches","cpassword","ResetPassword","navigation","props","params","email","setemail","setpassword","visible","setVisible","load","setload","message","setmessage","invalid","setinvalid","UpdatePassword","values","patch","key","then","res","results","data","console","log","status","navigate","catch","err","height","width","White","parent","topcontainer","justifyContent","alignItems","position","padding","require","bottomcontainer","fontSize","medium","marginVertical","action","handleChange","borderColor","light_border","borderWidth","borderRadius","errors","color","Red","top","backgroundColor","Yellow","marginTop","textTransform","handleSubmit"],"mappings":"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","sourcesContent":["import { Formik } from 'formik';\r\nimport React, { Component, useContext, useRef, useState } from 'react'\r\nimport { Animated, Image, StatusBar, View } from 'react-native'\r\nimport { BottomNavigation, Snackbar, TextInput } from 'react-native-paper';\r\nimport ButtonComponent from '../components/button';\r\nimport InputComponent from '../components/input';\r\nimport TextComponent from '../components/text';\r\nimport style from '../styles/screens/login';\r\nimport Constance from '../theme/const';\r\nimport { ThemeContext } from '../theme/themeProvider';\r\nimport * as yup from 'yup';\r\nimport * as Animatable from 'react-native-animatable';\r\nimport Anim from '../components/anim';\r\nimport axios from 'axios';\r\nimport { useRoute } from '@react-navigation/native';\r\nimport Progress from '../components/indicator';\r\n\r\n\r\nconst loginSchema = yup.object({\r\n  password: yup.string().required(\"Required\").min(8).matches(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/, \"Invalid password\"),\r\n  cpassword: yup.string().required(\"Required\").min(8).matches(/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$/, \"Invalid password\"),\r\n})\r\n\r\n\r\nconst ResetPassword = ({ navigation }) => {\r\n\r\n  const props = useRoute().params;\r\n  const [email, setemail] = useState('');\r\n  const [password, setpassword] = useState('');\r\n  const [visible, setVisible] = useState(true);\r\n  const [load, setload] = useState(false);\r\n  const [message, setmessage] = useState('');\r\n\r\n\r\n\r\n  const [invalid, setinvalid] = useState(false);\r\n\r\n\r\n  const UpdatePassword = async (values: any) => {\r\n\r\n    setload(true);\r\n    axios.patch(`https://sunstarapi.herokuapp.com/user/${props.key}`, values).then((res) => {\r\n\r\n        const results = res.data;\r\n\r\n        console.log('====================================');\r\n        console.log(values, props.key, results);\r\n        console.log('====================================');\r\n        if (results.status == 'Success') {\r\n            setinvalid(true);\r\n            setmessage(results.message);\r\n            setload(false);\r\n            navigation.navigate('loginscreen'); \r\n        } else {\r\n            setmessage(results.message);\r\n            setinvalid(true);\r\n            setload(false);\r\n        }\r\n\r\n    }).catch((err) => {\r\n\r\n        setinvalid(true);\r\n        setmessage(err);\r\n        setload(false);\r\n\r\n    });\r\n\r\n}\r\n\r\n\r\n\r\n  return (\r\n    <View style={{ height: '100%', width: '100%' }}>\r\n      <StatusBar barStyle={'dark-content'} backgroundColor={Constance.White}/>\r\n\r\n      <View style={style.parent}>\r\n\r\n        <View style={[style.topcontainer, { justifyContent: 'center', alignItems: 'center' }]}>\r\n          <View style={{ position: 'absolute', justifyContent: 'center', alignItems: 'center', padding: 40 }}>\r\n            <Anim json={require('../../assets/lottie/75988-forgot-password.json')} autoplay={true} autosize={true} loop={true} speed={1} style={{ height: '100%', width: '100%' }} />\r\n          </View>\r\n        </View>\r\n\r\n        <View style={style.bottomcontainer}>\r\n          <TextComponent style={{ fontSize: Constance.medium, marginVertical: 15 }} text='Reset password' />\r\n\r\n          <Formik\r\n            initialValues={{ password: '', cpassword: '' }}\r\n            onSubmit={(values, action) => {\r\n\r\n              if (values.password === values.cpassword) {\r\n                UpdatePassword(values)\r\n                }\r\n              else {\r\n                setmessage(\"Password does not match\");\r\n                setinvalid(true);\r\n              }\r\n\r\n              \r\n            }}\r\n            validationSchema={loginSchema}\r\n          >\r\n\r\n            {(props) => (\r\n              <View>\r\n                <InputComponent hint='Password'\r\n                  left={<TextInput.Icon name=\"at\" />}\r\n                  changeText={props.handleChange(\"password\")}\r\n                  value={props.values.password}\r\n                  style={{\r\n                    borderColor: Constance.light_border,\r\n                    borderWidth: 1, borderRadius: 5\r\n                  }}\r\n                />\r\n\r\n                {props.errors.password || null ? <Animatable.View animation=\"pulse\" easing=\"ease-out\"><TextComponent style={{ color: Constance.Red }} text={props.errors.password} /></Animatable.View> : null}\r\n                <InputComponent hint='Comfirm Password'\r\n                  left={<TextInput.Icon name=\"account-box\" />}\r\n                  changeText={props.handleChange(\"cpassword\")}\r\n                  value={props.values.cpassword}\r\n                  style={{\r\n                    borderColor: Constance.light_border,\r\n                    borderRadius: 5,\r\n                    borderWidth: 1, top: 5\r\n                  }}\r\n                />\r\n                {props.errors.cpassword ? <Animatable.View animation=\"pulse\" easing=\"ease-out\"><TextComponent style={{ color: Constance.Red }} text={props.errors.cpassword} /></Animatable.View> : null}\r\n\r\n\r\n                <ButtonComponent mode='contained' btnstyle={{ backgroundColor: Constance.Yellow, marginTop: 30 }} lblstyle={{ color: Constance.White, textTransform: 'capitalize' }} text='Reset Password' press={props.handleSubmit} />\r\n\r\n              </View>\r\n            )}\r\n          </Formik>\r\n\r\n        </View>\r\n\r\n\r\n        <Snackbar\r\n          visible={invalid}\r\n          onDismiss={() => setinvalid(false)}\r\n        >\r\n          {message}\r\n        </Snackbar>\r\n\r\n        {load ? <View style={{ height: '100%', width: '100%', position: 'absolute', justifyContent: 'center', alignItems: 'center' }}>\r\n          <Progress />\r\n        </View> : null}\r\n      </View>\r\n\r\n    </View>\r\n  )\r\n}\r\n\r\nexport default ResetPassword\r\n"]},"metadata":{},"sourceType":"module"}